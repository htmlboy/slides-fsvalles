---
title: Usé Custom Properties…
layout: layout-slides
---

%section
  %h1(style="font-size: 4em; line-height: 0.35")
    %span(style="font-size: .8em") Usé Custom Properties
    %br
    %span(style="font-size: .39em") y no te creerás lo que ocurrió a continuación
  %footer.note(style="display: flex; margin: 30px 55px 0 0; justify-content: flex-end;")
    %span(style="margin-right: 20px;")
      Javier Usobiaga
    %a(href="https://twitter.com/htmlboy" target="_blank")
      @htmlboy
%section
  %div
    %img.clean(src="images/Swwweet-logo.svg" alt="Swwweet")
  %a.note(href="https://swwweet.com" target="_blank") Swwweet.com
%section
  %img(src="images/meme-talk.jpg" alt="Lisa Simpson reduciendo mi charla a dos líneas de código")
  %p.note(lang="en") Thanks for coming to my Ted Talk.
%section
  %h2
    Di una charla de 20 minutos
    %br
    sobre dos líneas de código
  %p (gracias a este ingenioso truco)
%section
  %p Las llamadas “variables de CSS” ya están bien soportadas en los navegadores modernos.
  %p.fragment Bueno, pero… ya tenemos Sass, ¿no?
%section
  %h3 ¿Es demasiado tarde para las variables CSS?
  %p.fragment No.
%section
  %h3 Ventajas de las variables nativas
  %ul
    %li.fragment Se pueden cambiar dinámicamente
    %li.fragment Responden al contexto del DOM
    %li.fragment Pueden ser leídas y cambiadas por JS

%section
  %h3 Un apunte…
  %p
    Técnicamente, la primera variable de CSS
    %br
    es currentColor.
  %pre
    %code
      :preserve
        body { color: #444; }

        p { color: currentColor; }

        .ejemplo {
          box-shadow: 2px 2px 3px currentColor;
          background-image: linear-gradient(currentColor, transparent);
        }
  %p.note
    %a(href="https://theblog.adobe.com/extending-the-color-cascade-with-the-css-currentcolor-variable") theblog.adobe.com/extending-the-color-cascade-with-the-css-currentcolor-variable


%section
  %h2 Sintaxis

%section
  .codepen(data-height="600" data-editable="true" data-theme-id="0" data-slug-hash="xBYjOR" data-default-tab="css,result" data-user="htmlboy" data-embed-version="2")

%section
  .codepen(data-height="600" data-editable="true" data-theme-id="0" data-slug-hash="EMQRgE" data-default-tab="css,result" data-user="htmlboy" data-embed-version="2")


%section
  %p Las custom properties solo son propiedades.
  %pre
    %code
      :preserve
        /*No puedes declararlas fuera de las {…} */
        --screen-M: 600px;

        /* Y tampoco las puedes usar como media queries */
        @media(min-width: var(--screen-M)) {
          .ejemplo {
            width: 50%;
          }
        }
  %p.note Nice try.

%section
  %p Se pueden declarar una como valor de otra.
  %pre
    %code
      :preserve
        :root{
          --primario: lightblue;
          --sizeh1: 30px;
        }

        .principal {
          --fontColor: var(--primario);
          --fontSize: var(--sizeh1);
        }

%section
  %p Pero no se pueden hacer dependencias recursivas.
  %pre
    %code
      :preserve
        html {
          --foo: var(--bar);
          --bar: var(--foo);
        }
  %p.note Cómo tener a Javier entretenido durante media hora.

%section
  %p Se puede establecer un valor de fallback.
  %pre
    %code
      :preserve
        .ejemplo {
          font-size: var(--mainSize, 16px);
        º}
  %p.note Este valor se utilizará si la variable no está definida.

%section
  %p Y por supuesto, este fallback puede ser otra variable.
  %pre
    %code
      :preserve
        .ejemplo {
          font-size: var(--mainSize, var(--sizeh1, 16px));
        }
  %p.note Y el fallback de la variable de fallback podría ser otra variable y…

%section
  %p No podemos combinar directamente una variable con una unidad.
  %pre
    %code
      :preserve
        .foo {
          --spacer: 20;
          margin-bottom: var(--spacer)px);
        }
  %p.note No funciona porque añade un espacio entre la cifra y la unidad.

%section
  %p Pero se puede combinar con un calc()
  %pre
    %code
      :preserve
        .foo {
          --spacer: 20;
          margin-bottom: calc(var(--spacer) * 1px);
        }
  %p.note +"px" no funcionaría por que también añade un espacio.

%section
  %h2 Casos de uso: CSS y SVG

%section
  %h3 Pueden ayudar a simplificar el código
  %pre
    %code
      :preserve
        .alert {
          --theme: #ccc;
          --darkTheme: #777;
          --icon: '';
          background: var(--theme);
          border: 1px solid var(--darkTheme);
          &:before {
            background-image: var(--icon);
          }
        }
        .alert--success {
          --theme: #f0f9ef;
          --darkTheme: #7ebb7a;
          --icon: url(../img/success.svg);
        }
  %p.note
    %a(href="https://css-tricks.com/do-css-custom-properties-beat-sass-loops/" target="_blank") css-tricks.com/do-css-custom-properties-beat-sass-loops
%section
  %pre
    %code
      :preserve
        :root:lang(en) {--external-link: "external link";}
        :root:lang(es) {--external-link: "enlace externo";}

        a[href^="http"]::after {content: " (" var(--external-link) ")"}

  %p.note Otro ejemplo práctico, en el que hacemos depender el contenido generado de una variable.
%section
  %div(style="overflow:scroll; resize:horizontal")
    .codepen(data-height="600" data-editable="true" data-theme-id="0" data-slug-hash="GeQeKZ" data-default-tab="result" data-user="htmlboy" data-embed-version="2")

%section
  %div(style="overflow:scroll; resize:horizontal")
    .codepen(data-height="600" data-editable="true" data-theme-id="0" data-slug-hash="PLRKWe" data-default-tab="result" data-user="htmlboy" data-embed-version="2")
  %p.note Esta charla no va de CSS Grid, pero Grid es ❤️

%section
  .codepen(data-height="600" data-editable="true" data-theme-id="0" data-slug-hash="aMYKNL" data-default-tab="css,result" data-user="htmlboy" data-embed-version="2")

%section
  .codepen(data-height="600" data-editable="true" data-theme-id="0" data-slug-hash="ZLYqyr" data-default-tab="css,result" data-user="g12n" data-embed-version="2")
  %p.note
    Custom Properties, SVG y :hover por
    %a(href="https://codepen.io/g12n/") Michael Gehrmann

%section
  %h2 Casos de uso: JS

%section
  %h3 Cambiar Custom Properties con JS
  %pre
    %code
      :preserve
        element.style.setProperty('--color', 'red');
%section
  .codepen(data-height="600" data-editable="true" data-theme-id="0" data-slug-hash="BMbRqv" data-default-tab="result" data-user="Mamboleoo" data-embed-version="2")
  %p.note
    Unicorn trail, por
    %a(href="https://codepen.io/Mamboleoo/") Louis Hoebregts

%section
  %img(src="images/basic-scroll.jpg" alt="Librería BasicScroll")
  %a.note(href="https://basicscroll.electerious.com/" target="_blank") basicscroll.electerious.com

%section
  .codepen(data-height="600" data-editable="true" data-theme-id="0" data-slug-hash="QGNxxx" data-default-tab="result" data-user="electerious" data-embed-version="2")

%section
  .codepen(data-height="600" data-editable="true" data-theme-id="0" data-slug-hash="gLLozQ" data-default-tab="result" data-user="electerious" data-embed-version="2")

%section
  %h2 ¿Cuándo usarlas?
  %blockquote “If It Changes, It’s A Variable”
  %p.note
    %a(href="https://www.smashingmagazine.com/2018/05/css-custom-properties-strategy-guide/" target="_blank") smashingmagazine.com/2018/05/css-custom-properties-strategy-guide

%section
  %h2 Performance
  %ul
    %li.fragment Las variables se heredan y un cambio de valor en un nodo puede afectar a los descendientes
    %li.fragment calc() funciona bien con las variables, pero obviamente ralentiza ligeramente los cálculos
    %li.fragment Si cambiamos variables con JS, es preferible usar setProperty que directamente un style inline
    %li.fragment Las Custom Properties pueden ser una herramienta más eficiente que otras para efectos de scroll
  %p.note
    Más información:
    %a(href="https://blog.jiayihu.net/css-custom-properties-performance-in-2018/" target="_blank") blog.jiayihu.net/css-custom-properties-performance-in-2018
%section
  %h2 Recursos adicionales
  %p.note
    Post de introducción en Smashing Magazine:
    %br
    %a(href="https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/" target="_blank") smashingmagazine.com/2017/04/start-using-css-custom-properties
  %p.note
    Ejemplo de retícula flexbox con Custom Properties:
    %br
    %a(href="https://googlechrome.github.io/samples/css-custom-properties/" target="_blank") googlechrome.github.io/samples/css-custom-properties
  %p.note
    Jesús Olazagoitia en FrontFest 2019:
    %br
    %a(href="https://www.youtube.com/watch?v=NroY5YLLcVY" target="_blank") youtube.com/watch?v=NroY5YLLcVY

%section
  %h2 Conclusiones
  %ul
    %li.fragment
      %p Las Custom Properties abren la puerta a cambios fuertes en la arquitectura de la CSS.
    %li.fragment
      %p El layout y la forma en que que hacemos adaptaciones responsive va a cambiar radicalmente.
    %li.fragment
      %p Bien usadas, pueden ser una gran mejora de performance en muchos casos actuales.
    %li.fragment
      %p El preprocesado de CSS no va a desparacer, pero se transformará.

%section
  %h3 One more thing…
  %img(style="width: 10em" src="images/tweet-css-nesting.jpg" alt="The CSS Working Group approved CSS Nesting — which now has early Working Draft in Stage 1.")
  %p.fragment Bueno, pero… ya tenemos Sass, ¿no?

%section
  %h2 ¡Muchas gracias!
  .fragment
    %p ¿Preguntas?
    %p.note
      Presentación:
      %a(href="https://bit.ly/slidesFSV") bit.ly/slidesFSV

    %footer.note(style="display: flex; margin: 90px 55px 0 0; justify-content: flex-end;")
      %span(style="margin-right: 20px;")
        Javier Usobiaga
      %a(href="https://twitter.com/htmlboy" target="_blank")
        @htmlboy